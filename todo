a) Const and  append T to types. All over.
b) Make is not triggered when a header file is changed.
c) Static thread analyzer.
d) Destructors everywhere ?? C++ is a pain in the keester!
   Have to consider cstors dstors in all classes. Use the default keyword.
f) Remove all literals.


a) Worker should log when it start and ends a task.
b) Remove all initiators. Server side sort logic should be in main.
c) Client side. Timeout and lastReply. Timeout should be in the config file.
   The most efficient client should get the next task. 
   Dispatch should be able to detect a client going away. A signal, perhaps.
d) Read task and read reply in protocol.cpp should be redone. Nope!
e) Dispatch should have its own thread to handle network IO
f) Move all logs to the logs directory
h) APIs on either side.
i) Protocol layer tests! Test if 2 successive tasks or results are properly
   read! Not necessary. Good to have, though!
j) Performance issues. On the client side, it may be desirable to signal 
   the threads to quit when we know the queue is empty. There *maybe*
   something to be gained by making sure the sizes of files to a merge task
   are somewhat equal. Try out a scheme where *all* files are merged in one go.
   Also checkout with 8 threads in the pool.
k) Task Dispatch should take the args and id and return the taskId. 
   GetNewTask should be a private member.
l) Makefile for the tests and redo the tests.
m) New files have to be opened RW ALL
n) The file splitter on the agent side should be replaced with filePartition
o) Protocol versioning.
p) If the sortBlockSize is 400m, the time taken goes up by 2-3 times. BS! Ignore
q) Logs dont work after deploy. Its just a little infelicitous. Done.
r) Error handling in multiMerge. Done
s) Remove the hardcoded 8. Calculate the sortBlock size as the total Sort size     divided by the number of cores. 
